/**
 * POP_DataJUnitTestsALL class
 * This class contains tests for the tasks about
 * * calculating salaries in Salary class
 * * using the API in Names class
 * * manipulating data collections in myArrays class
 *
 * DO NOT EDIT THIS FILE
 *
 * @author Dr Suzy Atfield-Cutts adapted from Melanie Coles
 * @since 2020
 */

import static org.junit.jupiter.api.Assertions.*;
        import org.junit.jupiter.api.BeforeEach;
        import org.junit.jupiter.api.Test;

import java.util.Arrays;

public class POP_DataJUnitTestsALL {
    Salary salaryCalculator;
    Names names;
    MyArrays myArrays;

    @BeforeEach
    void createObject() {
        salaryCalculator = new Salary();
        names = new Names();
        myArrays = new MyArrays();
    }

    //SALARY TESTS
    @Test
    void testSalaryIncreaseInteger() {
        assertEquals(23200, salaryCalculator.salaryIncrease(23000));
        assertEquals(32200, salaryCalculator.salaryIncrease(32000));
        assertEquals(200, salaryCalculator.salaryIncrease(0));
    }

    @Test
    void testSalaryIncreaseDouble() {
        assertEquals(23200.8, salaryCalculator.salaryIncrease(23000.3));
        assertEquals(32200.50, salaryCalculator.salaryIncrease(32000.00));
        assertEquals(200.50, salaryCalculator.salaryIncrease(0.0));
    }

    @Test
    void testSalaryIncreasePercentage() {
        assertEquals(22000.0, salaryCalculator.salaryIncrease(20000.0, 10));
        assertEquals(48000.00, salaryCalculator.salaryIncrease(32000.00, 50));
        assertEquals(0, salaryCalculator.salaryIncrease(0, 50));
        assertEquals(60000, salaryCalculator.salaryIncrease(30000, 100));
    }

    @Test
    void testCalculatePay() {
        assertEquals(1920.00, salaryCalculator.calculatePay(32000.00));
        assertEquals(6000, salaryCalculator.calculatePay(100000));
        assertEquals(0, salaryCalculator.calculatePay(0));
    }

    @Test
    void testFormatCurrency()
    {
        assertEquals("£32,000.21", salaryCalculator.formatCurrency(32000.2086132));
        assertEquals("£23,000.30", salaryCalculator.formatCurrency(23000.30));
        assertEquals("£0.20", salaryCalculator.formatCurrency(0.20));
        assertEquals("£0.00", salaryCalculator.formatCurrency(0.00));
        assertEquals("£23,000.99", salaryCalculator.formatCurrency(23000.98765));
        assertEquals("£10,000,000,000.00", salaryCalculator.formatCurrency(10000000000.00));
    }

    //NAMES TESTS

    @Test
        //Task 1
    void testUpperCase() {
        assertEquals("BORIS", names.upperCaseName("boris"));
        assertEquals("FRED", names.upperCaseName("FRED"));
        assertEquals("", names.upperCaseName(""));
        assertEquals("5", names.upperCaseName("5"));
        assertEquals("A", names.upperCaseName("a"));
    }

    @Test
        //Task 2
    void testFullName() {
        assertEquals("Alison Jones", names.fullName("Alison", "Jones"));
        assertEquals("s t", names.fullName("s", "t"));
        assertEquals(" ", names.fullName("", ""));
        assertEquals("4 g", names.fullName("4", "g"));
    }

    @Test
        //Task 3
    void testLetterCount() {
        assertEquals(7, names.letterCount("Melanie"));
        assertEquals(58, names.letterCount("Llanfairpwllgwyngyllgogerychwyrndrobwllllantysiliogogogoch"));
        assertEquals(26, names.letterCount("ABCDEFGHIJKLMNOPQRSTUVWXYZ"));
        assertEquals(0, names.letterCount(""));
        assertEquals(1, names.letterCount("a"));
    }

    @Test
        //Task 4
    void testSameName() {
        assertEquals(false, names.theSameName("Bob", "Fred"));
        assertEquals(true, names.theSameName("Donald", "Donald"));
        assertEquals(true, names.theSameName("bob", "bob"));
        assertEquals(true, names.theSameName("z", "Z"));
        assertEquals(true, names.theSameName("", ""));
        assertEquals(false, names.theSameName("Al", "A1"));
        assertEquals(true, names.theSameName("5", "5"));

    }

    @Test
        //Task 5
    void testProperName() {
        assertEquals("Matthew", names.properCaseName("matthew"));
        assertEquals("Matthew", names.properCaseName("MATTHEW"));
        assertEquals("Matthew", names.properCaseName("mAtThEw"));
        assertEquals("S", names.properCaseName("s"));
        assertThrows(StringIndexOutOfBoundsException.class,() -> names.properCaseName(""));
    }

    //MyArrays

    @Test
        //Task 1
    void testAddUpNumbersIndividual() {
        assertEquals(150, myArrays.addUpNumbers(10,20,30,40,50));
        assertEquals(0, myArrays.addUpNumbers(0,0,0,0,0));
        assertEquals(0, myArrays.addUpNumbers(-1,-1,0,1,1));
        assertEquals(5000000, myArrays.addUpNumbers(1000000,1000000,1000000,1000000,1000000));
    }

    @Test
        //Task 2
    void testAddUpNumbersArray() {
        int[] numbers = {10,20,30,40,50};
        assertEquals(150, myArrays.addUpNumbers(numbers));
        int[] numbers1 = {0,0,0,0,0};
        assertEquals(0, myArrays.addUpNumbers(numbers1));
        int[] numbers2 = {-1,-1,0,1,1};
        assertEquals(0, myArrays.addUpNumbers(numbers2));
        int[] numbers3 = {1000000,1000000,1000000,1000000,1000000};
        assertEquals(5000000, myArrays.addUpNumbers(numbers3));
    }

    @Test
        //Task 3
    void testAverageOfNumbers() {
        int[] numbers = {10,20,30,40,50};
        assertEquals(30.0, myArrays.averageOfNumbers(numbers));
        int[] numbers1 = {10,22,30,40,50};
        assertEquals(30.4, myArrays.averageOfNumbers(numbers1));
        int[] numbers2 = {-1,-1,0,1,1};
        assertEquals(0, myArrays.averageOfNumbers(numbers2));
        int[] numbers3 = {100,120,24,777777,12};
        assertEquals(155606.60, myArrays.averageOfNumbers(numbers3));
    }

    @Test
        //Task 4
    void testConvertToCelsius() {
        int[] temps1 = {70,65,84,90,45};
        int[] CTempsAnswer = {21,18,28,32,7};
        assertArrayEquals(CTempsAnswer, myArrays.convertToCelsius(temps1));
        int[] temps2 = {32,0,-20,1,34};
        int[] CTempsAnswer2 = {0,-17,-28,-17,1};
        assertArrayEquals(CTempsAnswer2, myArrays.convertToCelsius(temps2));
    }

    @Test
        //Task 5
    void testUnitGrades() {
        int[] grades = {64,55,45,67,65,88};
        String[] gradesAnswer = {"APP:64","BSAD:55","CF:45", "DAD:67",
                "N&CS:65", "POP:88", "Average:64.0"};
        assertArrayEquals(gradesAnswer, myArrays.unitMarks(grades));
        int[] grades2 = {50,50,50,50,50,53};
        String[] gradesAnswer2 = {"APP:50","BSAD:50","CF:50", "DAD:50",
                "N&CS:50", "POP:53", "Average:50.5"};
        assertArrayEquals(gradesAnswer2, myArrays.unitMarks(grades2));

    }

    @Test
        //Task 6
    void testAndTheWinnerIs() {
        String[] names = {"Suzy", "Tim", "Toyin", "Heather", "Gail", "Melanie" };
        assertTrue(Arrays.asList(names).contains(myArrays.andTheWinnerIs(names)));
        String[] names2 = {"Suzy"};
        assertEquals("Suzy", myArrays.andTheWinnerIs(names2));
        String[] names3 = new String[5];
        assertEquals(null, myArrays.andTheWinnerIs(names3));
    }
}
